{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","preState","setPreState","curState","setCurState","input","setInput","operator","setOperator","total","setTotal","inputNum","e","includes","target","innerText","pre","useEffect","operatorType","equals","cal","String","parseFloat","className","value","displayType","thousandSeparator","onClick","charAt","substring","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.943db72b.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport NumberFormat from \"react-number-format\";\n\nfunction App() {\n  const [preState, setPreState] = useState(\"\");\n  const [curState, setCurState] = useState(\"\");\n  const [input, setInput] = useState(\"0\");\n  const [operator, setOperator] = useState(null);\n  const [total, setTotal] = useState(false);\n\n  const inputNum = (e) => {\n    if (curState.includes(\".\") && e.target.innerText === \".\") return;\n\n    if (total) {\n      setPreState(\"\");\n    }\n\n    curState\n      ? setCurState((pre) => pre + e.target.innerText)\n      : setCurState(e.target.innerText);\n    setTotal(false);\n  };\n\n  useEffect(() => {\n    setInput(curState);\n  }, [curState]);\n\n  useEffect(() => {\n    setInput(\"0\");\n  }, []);\n  const operatorType = (e) => {\n    setTotal(false);\n    setOperator(e.target.innerText);\n    if (curState === \"\") return;\n    if (preState !== \"\") {\n      equals();\n    } else {\n      setPreState(curState);\n      setCurState(\"\");\n    }\n  };\n\n  const equals = (e) => {\n    if (e?.target.innerText === \"=\") {\n      setTotal(true);\n    }\n    let cal;\n    switch (operator) {\n      case \"/\":\n        cal = String(parseFloat(preState) / parseFloat(curState));\n        break;\n\n      case \"+\":\n        cal = String(parseFloat(preState) + parseFloat(curState));\n        break;\n      case \"X\":\n        cal = String(parseFloat(preState) * parseFloat(curState));\n        break;\n      case \"-\":\n        cal = String(parseFloat(preState) - parseFloat(curState));\n        break;\n      default:\n        return;\n    }\n    setInput(\"\");\n    setPreState(cal);\n    setCurState(\"\");\n  };\n\n  const minusPlus = () => {\n    if (curState.charAt(0) === \"-\") {\n      setCurState(curState.substring(1));\n    } else {\n      setCurState(\"-\" + curState);\n    }\n  };\n\n  const percent = () => {\n    preState\n      ? setCurState(String((parseFloat(curState) / 100) * preState))\n      : setCurState(String(parseFloat(curState) / 100));\n  };\n\n  const reset = () => {\n    setPreState(\"\");\n    setCurState(\"\");\n    setInput(\"0\");\n  };\n  return (\n    <div className='container'>\n      <div className='wrapper'>\n        <div className='screen'>\n          {input !== \"\" || input === \"0\" ? (\n            <NumberFormat\n              value={input}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          ) : (\n            <NumberFormat\n              value={preState}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          )}\n        </div>\n        <div className='btn light-gray' onClick={reset}>\n          AC\n        </div>\n        <div className='btn light-gray' onClick={percent}>\n          %\n        </div>\n        <div className='btn light-gray' onClick={minusPlus}>\n          +/-\n        </div>\n        <div className='btn orange' onClick={operatorType}>\n          /\n        </div>\n        <div className='btn' onClick={inputNum}>\n          7\n        </div>\n        <div className='btn' onClick={inputNum}>\n          8\n        </div>\n        <div className='btn' onClick={inputNum}>\n          9\n        </div>\n        <div className='btn orange' onClick={operatorType}>\n          X\n        </div>\n        <div className='btn' onClick={inputNum}>\n          4\n        </div>\n        <div className='btn' onClick={inputNum}>\n          5\n        </div>\n        <div className='btn' onClick={inputNum}>\n          6\n        </div>\n        <div className='btn orange' onClick={operatorType}>\n          +\n        </div>\n        <div className='btn' onClick={inputNum}>\n          1\n        </div>\n        <div className='btn' onClick={inputNum}>\n          2\n        </div>\n        <div className='btn' onClick={inputNum}>\n          3\n        </div>\n        <div className='btn orange' onClick={operatorType}>\n          -\n        </div>\n        <div className='btn zero' onClick={inputNum}>\n          0\n        </div>\n        <div className='btn' onClick={inputNum}>\n          .\n        </div>\n        <div className='btn' onClick={equals}>\n          =\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}